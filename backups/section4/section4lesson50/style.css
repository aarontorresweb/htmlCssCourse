* {
    /* Universal selector, lowest inheritance.
    Very common to initialize margin, padding
    and other traits here as a kind of 
    'global reset' or 'global initialization'
    */
    margin: 0;
    padding: 0;
    /* Box sizing is not an inheritable trait. It needs to be defined in the universal selector. */
    box-sizing: border-box;
}

/* PAGE SECTIONS */
body {
    color: #444;
    font-family: sans-serif;
    position: relative; /* Relative positioning allows the 'like' button to appear correctly */
}

.container {
    /* Auto centers the entire page. 
    The entire page is inside the container element. */
    width: 1200px;
    /* margin-left: auto;
    margin-right: auto; */
    /* Shorthand for the above */
    margin: 0 auto;
    position: relative;
}

.main-header {
    background-color: #f7f7f7;
    /* Long way of defining paddings. 
    /* padding: 20px;
    padding-left: 40px;
    padding-right: 40px; */
    /* Shorthand way of defining paddings. */
    padding: 20px 40px;
    margin-bottom: 60px;
    height: 80px;
}

nav {
    font-size: 18px;
    text-align: center; /* Align all text to the center. */
}

article {
    margin-bottom: 40px;
}

.post-header {
    margin-bottom: 40px;
}

aside {
    background-color: #f7f7f7;
    border-top: 5px solid rgba(16, 152, 173, 0.753);
    border-bottom: 5px solid rgba(16, 152, 173, 0.753);
    padding: 50px 40px ;
}

/* SMALLER ELEMENTS */

h1, h2, h3 {
    color: rgba(16, 152, 173, 0.753);
}

h1 {
    color: rgba(16, 152, 173, 0.753);
    font-size: 30px;
    text-transform: uppercase;
    font-style: italic;
}

h2 {
    font-size: 40px;
    margin-bottom: 30px;
}

h3 {
    font-size: 30px;
    margin-bottom: 20px;
    margin-top: 40px;
    /* Keep in mind the phenomonen of 'collecting margins'.
    When 2 margins occupy the say space, only one is visible,
    typically the larger of the two margins. */
}

h4 {
    font-size: 20px;
    text-transform: uppercase;
    text-align: center;
    margin-bottom: 30px;
}

p {
    font-size: 22px;
    line-height: 1.5;
    margin-bottom: 15px;
}

ul, li {
    margin-left: 50px;
    margin-bottom: 20px;
}

li {
    font-size: 20px;
    margin-bottom: 10px;
}

li:last-child {
    margin-bottom: 0;
}

/* footer p {
    font-size: 16px;
} */

/* article header p {
    font-style: italic;
} */

/* Do not repeat ids # - use . classes for repetition. 
ID's are one usa case, classes are for multiple use cases. 
Typically we use classes and not ID's. */

#author {
    font-style: italic;
    font-size: 18px;
}

#copyright {
    font-size: 16px;
}

.related-author {
    font-size: 18px;
    font-weight: bold;
}

.related {
    list-style: none;
    margin-left: 0;
}

li:first-child {
    font-weight: bold;
}

li:last-child {
    font-style: italic;
}

li:nth-child(2) {
    color: red;
}

li:nth-child(odd) {
    color: blue;
}

article p:first-child { /* This doesn't work because the first child of article is not a p tag. */
    color: red;
}

/* This is an example of using 'last-child' element in a way that doesn't work. */
article p:last-child { /* This works because the last child of article is a p tag. */
    color: red;
}

/* Styling links - Lesson 29 */
a:link {
    color:rgba(16, 152, 173, 0.753);
    text-decoration: none;
}

a:visited {
    color:rgba(16, 152, 173, 0.753);
}

a:hover {
    /* Styles the link when your mouse is over it. 'text decoration' property has 3 traits. */
    color: orangered;
    font-weight: bold;
    text-decoration: underline none orangered;
}

a:active {
    /* Styles the link when your mouse is clicking. */
    background-color: black;
    font-style: italic;
}

/* nav a:link {
    font-size: 18px;
} */

.post-img {
    width: 100%;
    height: auto;
}

nav a:link {
    /* background-color: blue;
    margin: 20px;
    padding: 20px;

    // Change to block level element to display as a block level element rather than an inline element. 
    display: block; */

    margin-right: 30px;
    margin-top: 10px;
    display: inline-block;
}

nav a:link:last-child {
    margin-right: 0;
}

.like-button {
    font-size: 20px;
    padding: 20px;
    cursor: pointer;
    position: absolute;
    /* top: 50px;
    left: 50px; */
    bottom: 50px;
    right: 50px;
}

/* This is a pseudo element, which uses 2 colons. 
Pseudo classes use only 1 colon. */
h1::first-letter {
    /* font-size: 30px; */
    font-style: normal;
    margin-right: 5px;
}

/* This type of selector is an 'adjacent sibling' selector. 
It finds the 'p' elements that are adjacent (in this case after)
to the 'h3' elements and styles the first line of the selected elements.
*/
h3 + p::first-line {
    /* color: red; */
}

/* 'After pseudo element': Creates a pseudo element that will
automatically be the very first child of the selected element. 
Useful for small cosmetic stylings where you don't want to insert
a new HTMl element. */

h2 {
    /* background-color: orange; */
    position: relative;
}

/* Using the 'after' pseudo element makes your selection the last-child.
Using the 'before' pseudo element makes your selection the first-child. 
*/
h2::after {
    /* Must define the content property, even if there is no text. */
    content: "TOP";
    background-color: #ffe70e;
    color: #000;
    font-size: 16px;
    font-weight: bold;
    display: inline-block;
    padding: 5px 10px;
    position: absolute;
    top: -10px;
    right: -25px;
}

/* BEGINNING OF SECTION 4: LAYOUTS */
/* FLOATS */

.author-img {
    float: left;
    margin-bottom: 20px;
}

.author {
    /* padding-left: 10px; */
    padding-top: 10px;
    margin-left: 20px;
    float: left;
}

h1 {
    float: left;
}

nav {
    float: right;
}

/* .clear {
    clear: both;
} */

.clearfix::after {
    clear: both;
    content: '';
    display: block;
}

article {
    /* background-color: green; */
    width: 825px;
    float: left;
}

aside {
    /* background-color: red; */
    width: 300px;
    float: right;
}

footer {
    /* background-color: yellow; */
    clear: both;
}